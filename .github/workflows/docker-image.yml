name: Docker Image CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types:
      - published

env:
  DOCKERHUB_REPOSITORY : mimiro/datahub
  
jobs:
  Docker_AMD64:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.image_tag.outputs.image_tag }}
      
    steps:
    
      - name: Checkout code
        uses: actions/checkout@v2  

      - name: Set up Docker Buildx (enable caching)
        uses: docker/setup-buildx-action@v1
            
      - name: Set Image Tag
        id: image_tag
        run: |
          if [ ${{ github.event_name }} == 'release' ]
          then
            echo "Setting Stable Image Tag"
            echo ::set-output name=image_tag:: ${{ env.DOCKERHUB_REPOSITORY }}:$(echo $GITHUB_REF | cut -d / -f 3)-$(uname -m)
          else
            echo "Setting Unstable Image"
            echo ::set-output name=image_tag:: ${{ env.DOCKERHUB_REPOSITORY }}:v-$(cat VERSION.txt)$GITHUB_RUN_NUMBER-unstable-$(uname -m)
          fi
       
      # Login to Docker registry except on PR
      - name: Login to DockerHub
        id: docker_login
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}      

      - name: Build Docker Image
        uses: docker/build-push-action@v2
        id: docker_build
        with:
          push: false
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.image_tag.outputs.image_tag }} 

      - name: Trivy vulnerability scan
        uses : aquasecurity/trivy-action@master
        with :
          image-ref: '${{ steps.image_tag.outputs.image_tag }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'         

      - name: Push Image to DockerHub
        id: dockerhub_push
        if: |
          (
            ( github.ref == 'refs/heads/master' && github.event_name == 'push' ) 
            || 
            ( github.event_name == 'release')
          ) 
            && 
          ( github.event_name != 'pull_request')  

        run: |
          docker image push ${{ steps.image_tag.outputs.image_tag }}

  Docker_ARM64:
    runs-on: ARM64
    outputs:
      image_tag: ${{ steps.image_tag.outputs.image_tag }}
      
    steps:
    
      - name: Checkout code
        uses: actions/checkout@v2  

      - name: Set up Docker Buildx (enable caching)
        uses: docker/setup-buildx-action@v1
            
      - name: Set Image Tag
        id: image_tag
        run: |
          if [ ${{ github.event_name }} == 'release' ]
          then
            echo "Setting Stable Image Tag"
            echo ::set-output name=image_tag:: ${{ env.DOCKERHUB_REPOSITORY }}:$(echo $GITHUB_REF | cut -d / -f 3)-$(uname -m)
          else
            echo "Setting Unstable Image"
            echo ::set-output name=image_tag:: ${{ env.DOCKERHUB_REPOSITORY }}:v-$(cat VERSION.txt)$GITHUB_RUN_NUMBER-unstable-$(uname -m)
          fi
       
      # Login to Docker registry except on PR
      - name: Login to DockerHub
        id: docker_login
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}      

      - name: Build Docker Image
        uses: docker/build-push-action@v2
        id: docker_build
        with:
          push: false
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.image_tag.outputs.image_tag }} 

      - name: Trivy vulnerability scan
        uses : aquasecurity/trivy-action@master
        with :
          image-ref: '${{ steps.image_tag.outputs.image_tag }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'         

      - name: Push Image to DockerHub
        id: dockerhub_push
        if: |
          (
            ( github.ref == 'refs/heads/master' && github.event_name == 'push' ) 
            || 
            ( github.event_name == 'release')
          ) 
            && 
          ( github.event_name != 'pull_request')        
        run: |
          docker image push ${{ steps.image_tag.outputs.image_tag }}
    
  Docker_Manifest:
    runs-on: ubuntu-latest
    needs: [Docker_AMD64,Docker_ARM64]
    if: |
      (
        ( github.ref == 'refs/heads/master' && github.event_name == 'push' ) 
        || 
        ( github.event_name == 'release')
      ) 
        && 
      ( github.event_name != 'pull_request') 

    steps:   
      
      - name: Checkout code
        uses: actions/checkout@v2  

      - name: Login to DockerHub
        id: docker_login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set Image Tag
        id: image_tag
        run: |
          if [ ${{ github.event_name }} == 'release' ]
          then
            echo "Setting Stable Image Tag"
            echo ::set-output name=image_tag:: ${{ env.DOCKERHUB_REPOSITORY }}:$(echo $GITHUB_REF | cut -d / -f 3)
          else
            echo "Setting Unstable Image"
            echo ::set-output name=image_tag:: ${{ env.DOCKERHUB_REPOSITORY }}:v-$(cat VERSION.txt)$GITHUB_RUN_NUMBER-unstable
          fi  

      - name: Show Tag
        run: echo ${{ steps.image_tag.outputs.image_tag }}  

      - name: Docker Manifest
        id: docker_manifest

        run: |    

          if [ ${{ github.event_name }} == 'release' ]

          then

            #tag:release version
            docker manifest create ${{ steps.image_tag.outputs.image_tag }} \
              ${{needs.Docker_AMD64.outputs.image_tag}} \
              ${{needs.Docker_ARM64.outputs.image_tag}} 
            
            docker manifest push ${{ steps.image_tag.outputs.image_tag }}

            #tag:latest
            docker manifest create  ${{ env.DOCKERHUB_REPOSITORY }}:latest \
              ${{needs.Docker_AMD64.outputs.image_tag}} \
              ${{needs.Docker_ARM64.outputs.image_tag}} 
            
            docker manifest push  ${{ env.DOCKERHUB_REPOSITORY }}:latest

          else
             docker manifest create ${{ steps.image_tag.outputs.image_tag }} \
              ${{needs.Docker_AMD64.outputs.image_tag}} \
              ${{needs.Docker_ARM64.outputs.image_tag}} 
          docker manifest push ${{ steps.image_tag.outputs.image_tag }}    

          fi
